import { LitElement, TemplateResult } from 'lit';
import '@material/mwc-icon-button';
import '@material/mwc-icon-button-toggle';
import { Point } from './foundation/sldUtil.js';
import { IED, Connection } from './foundation/types.js';
export declare class CommunicationMappingEditor extends LitElement {
    substation: Element;
    gridSize: number;
    links: Connection[];
    get ieds(): IED[];
    filterReport: boolean;
    filterGOOSE: boolean;
    filterSMV: boolean;
    selectedIed?: Element;
    filterRcv: boolean;
    filterSend: boolean;
    editMode: boolean;
    showLabel: boolean;
    placing?: Element;
    placingLabel?: Element;
    placingOffset: Point;
    mouseX: number;
    mouseY: number;
    mouseX2: number;
    mouseY2: number;
    get idle(): boolean;
    sld: SVGGraphicsElement;
    container: HTMLDivElement;
    svgCoordinates(clientX: number, clientY: number): Point;
    reset(): void;
    placeLabel(element: Element, x: number, y: number): void;
    startPlacingLabel(element: Element | undefined, offset?: Point): void;
    placeElement(element: Element, x: number, y: number): void;
    startPlacing(element: Element | undefined, offset?: Point): void;
    onWheelZoom(evt: WheelEvent): void;
    isConnectionFiltered(conn: Connection): boolean;
    constructor();
    renderedLabelPosition(element: Element): Point;
    renderLabel(element: Element): TemplateResult<2>;
    renderedPosition(element: Element): Point;
    renderIED(ied: IED): TemplateResult<2>;
    renderService(controlBlock: string): TemplateResult[];
    renderInfoBox(): TemplateResult;
    render(): TemplateResult<1>;
    static styles: import("lit").CSSResult;
}
